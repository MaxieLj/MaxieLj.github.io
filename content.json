[{"title":"laravel学习笔记'","date":"2017-02-08T14:10:05.000Z","path":"2017/02/08/larave学习笔记/","text":"laravel- 学习笔记 laravel最近新冒出来的一个框架，在国外已经风靡，但是在国内却并没有流行起来。我想造成这种原因可能有几点： 国内从业人员英语基础普遍偏差，没有系统阅读文档的能力 主动学习积极性较差 固守于已经学会的知识 以此为鉴 ##l aravel 配置篇 ##lavel 有三种安装方法： 使用composer安装 使用laravel安装器安装 下载解压安装 composer先说第一种，使用composer安装，使用 composer create-project 进行安装1composer create-project --prefer-dist laravel/laravel blog ###laravel安装器###使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器1composer global require &quot;laravel/installer&quot; 当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器laravel安装器默认位置Windows:C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\binlinux:~/.composer/vendor/bin 下载解压安装因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包下载地址为http://www.golaravel.com/download/ 配置laravel所有的配置文件都在根目录conf文件夹下当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入key:generate.laravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里 开发服务器laravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令php artisan serve即可。但是这毕竟是开发使用过的，不能再生产环境中使用。 #laravel其他laravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。","tags":[]},{"title":"github","date":"2016-12-26T14:04:09.000Z","path":"2016/12/26/github/","text":"#关于Git的使用 Git的安装和使用 准备工作： 下载git 客户端 链接地址 下载完毕后，安装一路一下一步。安装完成之后我们开始使用Git使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。 12git config –global user.name “用户名”git config –global user.email “邮箱” 第一条命令用来告诉 git 我们的名字（以后链接github）第二条命令用来告诉git 我们的邮箱 到此我们就可以使用Git了 链接github如果我们希望把自己的项目托管在github我们就需要再做一些配置 首先我们需要生成ssh,使用以下命令1ssh-keygen –t rsa –C 然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容 接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。 不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里1git remote add origin git@github.com:aaa/xxx 在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。以后就可以使用git来进行版本管理和推送到github里了。正常操作代码1234git statusgit add .git commit -a &apos;message&apos;git push 提交完毕。 如果我们需要在其他电脑上使用我们托管的代码，我们需要使用1git pull 或者1git colne &apos;address&apos; 来从github上获取我们所需要的代码 如果在配置过程中出现错误，按照提示的代码解决即可。当然在此如果我们直接使用了1git commit -a 会弹出来vim窗口，在这里写一些vim的命令在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除 在飞插入模式写:wq 保存并推出","tags":[]},{"title":"hexo git github搭建博客","date":"2016-12-19T13:48:07.000Z","path":"2016/12/19/hexo-git-github搭建博客/","text":"在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点： github的大环境。（装逼） 免费稳定 有一定的技术含量，我个人喜欢折腾。 为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。 ** 开始**需求环境 git git下载地址 node.js node.js下载地址 两个安装都是一路下一步 验证软件正确安装git --version node -v npm -v 如果显示版本信息，怎安装成功。 安装hexo在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。不过一般不会被墙，我使用npm。运行下边的命令安装hexo：被墙请使用命令： npm install -g cnpm --registry=https://registry.npm.taobao.org 以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo npm install hexo-cli -g 安装完成后，验证是否安装成功。 hexo -v 新建文件夹yourblog,输入命令 $ hexo init blog $ cd blog 新建博客 $ hexo new &quot;Hello Hexo&quot; 生成静态页面 $ hexo generate 运行服务 $ hexo server 然后打开浏览器输入 localhost:4000 即可访问本地静态页面。 接下来我们把本地静态页面PUSH到github 首先你要有github账号。 新建一个github.io的库 设置本地github配置参数 经本地静态页面push到github github设置 新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 廖雪峰的官网我们来直接进行第二不，创建一个github.io库。首先登陆我们的github账号点击new repository,然后输入youname.github.iogit设置设置git配置信息 $ git config --global user.name &quot;你的用户名&quot; $ git config --global user.email &quot;你的邮箱&quot; hexo 设置 安装hexo git插件 npm install hexo-deployer-git --save 然后打开博客根目录的_config.yml文件大致内容是这个样子的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 和女票抢可乐subtitle:description:author: MaxieLjlanguage:timezone:# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yoursite.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: yilia# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/MaxieLj/MaxieLj.github.io.git branch: masterjsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 我们只需要在尾部添加：1234deploy: type: git repository: https://github.com/MaxieLj/MaxieLj.github.io.git branch: master 然后我们运行 $ hexo g 生成静态文件然后推送到github $ hexo d 然后访问youname.github.io就可以看到生成的静态页面了当然我们一般是在本地调试好再用 hexo d推送到github","tags":[]}]