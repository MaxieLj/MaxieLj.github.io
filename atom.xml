<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxie&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-29T07:43:51.154Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MaxieLj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法-全排列-46</title>
    <link href="http://yoursite.com/2019/01/29/%E7%AE%97%E6%B3%95-%E5%85%A8%E6%8E%92%E5%88%97-46/"/>
    <id>http://yoursite.com/2019/01/29/算法-全排列-46/</id>
    <published>2019-01-29T07:18:56.000Z</published>
    <updated>2019-01-29T07:43:51.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>###英文<br>Given a collection of distinct integers, return all possible permutations.</p><p>Example:</p><p>Input: [1,2,3]<br>Output:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p><p>示例:</p><p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><ul><li>借鉴之前做的第k个排序</li><li>把所有的排序塞进一个二维数组里</li></ul><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>思路一打败了百分之56的人，我觉得还有其他建单的思路。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of arrays of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">jiecheng</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = ret *n;</div><div class="line">        n--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span>** <span class="title">permute</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</div><div class="line">    *returnSize = jiecheng(numsSize);</div><div class="line">    <span class="comment">//返回的二维数组</span></div><div class="line">    <span class="keyword">int</span>** ret = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>((<span class="keyword">sizeof</span>(<span class="keyword">int</span>*)*(*returnSize)));</div><div class="line">    <span class="comment">//记录头指针</span></div><div class="line">    <span class="keyword">int</span>** current = ret;</div><div class="line">    <span class="comment">//标识进位</span></div><div class="line">    <span class="keyword">int</span>* tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">    tmp[numsSize<span class="number">-1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = numsSize<span class="number">-2</span>; i&gt;=<span class="number">0</span>; i--)</div><div class="line">    &#123;</div><div class="line">        tmp[i] = tmp[i+<span class="number">1</span>]*(numsSize<span class="number">-1</span>-i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//标识是否使用</span></div><div class="line">    <span class="keyword">int</span> *flag = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">    <span class="comment">//初始化所有都为0；</span></div><div class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>, t = <span class="number">0</span>, k =<span class="number">0</span>, m = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">    <span class="comment">//输出每一个组合</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (*returnSize); i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>* tmp1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize); </div><div class="line">        <span class="comment">//初始化</span></div><div class="line">        idx = <span class="number">0</span>, t = <span class="number">0</span>; k = i , m=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numsSize; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//取当前应取数字所在位</span></div><div class="line">            t = (k<span class="number">-1</span>)/tmp[j];</div><div class="line">            <span class="comment">//保留数坐在位置</span></div><div class="line">            idx =t;</div><div class="line">            <span class="keyword">for</span>( m  = <span class="number">0</span>; m &lt; numsSize;m++)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//寻找最左未使用的数</span></div><div class="line">                <span class="keyword">if</span>(!flag[m])</div><div class="line">                &#123;</div><div class="line">                    t--;</div><div class="line">                    <span class="keyword">if</span>(t == <span class="number">-1</span>)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            tmp1[j] = nums[m];</div><div class="line">            <span class="comment">// printf("m:%d,",m);</span></div><div class="line">            <span class="comment">// printf("j:%d,",j);</span></div><div class="line">            <span class="comment">// printf("%d,",tmp1[j]);</span></div><div class="line">            flag[m] = <span class="number">1</span>;</div><div class="line">            k -= (idx*tmp[j]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        (*current) = tmp1;</div><div class="line"></div><div class="line">        current++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;###英文&lt;br&gt;Given a collection of distinct integers, return all possible 
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库-explain</title>
    <link href="http://yoursite.com/2019/01/29/%E6%95%B0%E6%8D%AE%E5%BA%93-explain/"/>
    <id>http://yoursite.com/2019/01/29/数据库-explain/</id>
    <published>2019-01-29T07:18:29.000Z</published>
    <updated>2019-01-29T09:43:52.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>使用<code>explain</code>可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。<br><code>explain的官方文档</code><br><a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html" target="_blank" rel="noopener">explain的官方文档</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用方法，在select前加上<strong>explain</strong>即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select * from cm_car_dealer where car_dealer id &gt; 56</div></pre></td></tr></table></figure><p>结果如图，会涉及到多个字段。</p><p><img src="/photo/img/数据库-explain/explain1.png" alt="执行结果"></p><table><thead><tr><th>参数</th><th style="text-align:right">结果</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">1</td><td style="text-align:center">第几个执行的语句</td></tr><tr><td>select_type</td><td style="text-align:right">SIMPLE</td><td style="text-align:center">查询类型）</td></tr><tr><td>table</td><td style="text-align:right">cm_car_dealer</td><td style="text-align:center">表示从哪张表获取的数据</td></tr><tr><td>type</td><td style="text-align:right">range</td><td style="text-align:center">区间索引</td></tr><tr><td>possible_keys</td><td style="text-align:right">PRIMARY</td><td style="text-align:center">表示mysql可以使用哪些索引来查到这条记录</td></tr><tr><td>key</td><td style="text-align:right">PRIMARY</td><td style="text-align:center">实际使用到的索引。如果为NULL，则没有使用索引</td></tr><tr><td>key_len</td><td style="text-align:right">4</td><td style="text-align:center">主键是int型，所以为4.一般来说这个越小越好</td></tr><tr><td>ref</td><td style="text-align:right"></td><td style="text-align:center">表示mysql可以使用哪些索引来查到这条记录</td></tr><tr><td>rows</td><td style="text-align:right">159</td><td style="text-align:center">表示需要遍历多少行才能找到当前数据</td></tr><tr><td>Extra</td><td style="text-align:right">Using where</td><td style="text-align:center">执行状态说明</td></tr></tbody></table><h3 id="id查询的序号"><a href="#id查询的序号" class="headerlink" title="id查询的序号"></a>id查询的序号</h3><p>表示当前查询的序号，其值为数字，表示sql执行的次序。</p><h4 id="id相同"><a href="#id相同" class="headerlink" title="id相同"></a>id相同</h4><p>当id相同时，执行顺序是自上而下的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select * from cm_users,cm_car_dealer_certification where cm_users.id = cm_car_dealer_certification.car_dealer_id</div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain2.png" alt="执行结果"></p><h4 id="id不同"><a href="#id不同" class="headerlink" title="id不同"></a>id不同</h4><p>当id不同时，id序号递增，id越大的越先被执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select * from (select * from cm_users where id &gt;14585) as a  where id = 23213</div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain3.png" alt="执行结果"></p><h4 id="既有id相同，也有id不同的"><a href="#既有id相同，也有id不同的" class="headerlink" title="既有id相同，也有id不同的"></a>既有id相同，也有id不同的</h4><p>如果既有id相同，也有id不同的。首先按照id由大到小次序执行，如果id相同则执行顺序为由上到下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select d1.id,(select id from cm_users where id = 14585) as d2  from (select * from cm_users where id &gt;1 and id &lt; 200) as d1 ,cm_car_dealer_certification as d3 where d1.id =  d3.car_dealer_id</div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain4.png" alt="执行结果"></p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>select_type表示查询的类型，主要有普通查询、联合查询、子查询和复杂查询。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;explain&lt;/code&gt;可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。&lt;br&gt;&lt;co
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>算法-最接近的三数之和-16</title>
    <link href="http://yoursite.com/2019/01/28/%E7%AE%97%E6%B3%95-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/28/算法-最接近的三数之和/</id>
    <published>2019-01-28T07:18:49.000Z</published>
    <updated>2019-01-28T13:48:23.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p>Example:</p><p>Given array nums = [-1, 2, 1, -4], and target = 1.</p><p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="原来思路"><a href="#原来思路" class="headerlink" title="原来思路"></a>原来思路</h3><p>与求三数之和相似，先排序再查找最优解，然是时间复杂度由n^3变为n^2。</p><ul><li>排序数组</li><li>定义左右指针 <code>i=key+1</code>、<code>j=size-1</code>，左加右减，寻找最优解（val +$nums[$i]+$nums[$j] == $target）。</li><li>循环节点，重复上述操作寻找最优解。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">threeSumClosest</span><span class="params">($nums, $target)</span> </span>&#123;</div><div class="line">        sort($nums);<span class="comment">//排序就不写了。。</span></div><div class="line">        <span class="keyword">foreach</span>($nums <span class="keyword">as</span> $key =&gt; $val)</div><div class="line">        &#123;</div><div class="line">            $i = $key +<span class="number">1</span>;</div><div class="line">            $j = count($nums) <span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>($j &gt; $i)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//如果相等，直接返回。</span></div><div class="line">                <span class="keyword">if</span>($val + $nums[$i] + $nums[$j] == $target)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> $val + $nums[$i] + $nums[$j];</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//获取最优解</span></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($tmp))&#123;</div><div class="line">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class="line">                    <span class="keyword">if</span>($absv &lt; abs($tmp-$target)) &#123;</div><div class="line">                        $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class="line">                    &#125;  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class="line">                    $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($val + $nums[$i] + $nums[$j] &gt; $target)</div><div class="line">                &#123;</div><div class="line">                    $j--;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($val + $nums[$i] + $nums[$j] &lt;$target)</div><div class="line">                &#123;</div><div class="line">                    $i++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-盛水最多的容器</title>
    <link href="http://yoursite.com/2019/01/28/%E7%AE%97%E6%B3%95-%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/01/28/算法-盛水最多的容器/</id>
    <published>2019-01-28T07:11:20.000Z</published>
    <updated>2019-01-28T13:48:50.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p><code>11. Container With Most Water</code><br>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p>Note: You may not slant the container and n is at least 2.</p><p><img src="/photo/img/算法-盛水最多的容器/question_11.jpg" alt="image"></p><p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p><p>Example:</p><p>Input: [1,8,6,2,5,4,8,3,7]<br>Output: 49</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p><code>11. 盛最多水的容器</code></p><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="/photo/img/算法-盛水最多的容器/question_11.jpg" alt="image"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p>示例:</p><p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><ul><li>遍历循环，寻找最优解。</li></ul><h3 id="思路2（贪心）"><a href="#思路2（贪心）" class="headerlink" title="思路2（贪心）"></a>思路2（贪心）</h3><ul><li>取数组最左最右作为容器的左右边界。</li><li>将高度较小的的边界不断向内移动，直到找到面积更大的。</li><li>重复第二部操作，直到左右边界重合。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>* height, <span class="keyword">int</span> heightSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(heightSize &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> hight = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heightSize;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; heightSize; j++)</div><div class="line">        &#123;</div><div class="line">            width = j -i;</div><div class="line">            hight = min(height[i], height[j]);</div><div class="line">            ret = max(ret, (width*hight));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数最小值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(a, b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数内最大值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(a, b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>优化后代码</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>* height, <span class="keyword">int</span> heightSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(heightSize &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = heightSize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i &lt; j)</div><div class="line">    &#123;</div><div class="line">        h = min(height[i], height[j]);</div><div class="line">        ret  = max(ret, (h*(j-i)));</div><div class="line">        <span class="keyword">if</span>(height[i] &lt; height[j]) i++;</div><div class="line">        <span class="keyword">else</span> j--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数最小值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(a, b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数内最大值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(a, b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;&lt;co
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-三数之和</title>
    <link href="http://yoursite.com/2019/01/28/%E7%AE%97%E6%B3%95-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/28/算法-三数之和/</id>
    <published>2019-01-28T04:23:30.000Z</published>
    <updated>2019-01-28T13:47:34.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="原思路"><a href="#原思路" class="headerlink" title="原思路"></a>原思路</h3><p>暴力循环寻找最优解，但是时间复杂度变成n^3,会超时。</p><h3 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h3><ul><li>首先对数组进行排序（最好快排）</li><li>循环数组，当前节点为i</li><li>定义两个指针 <code>j (j=i+1)</code>、 <code>k (k=numssize-1)</code>,依据条件（nums[j] + nums[j] + nums[k] == 0）遍历寻找最优解。</li><li>如果最小节点i &gt; 0，则无需继续循环。<br>优化后代码时间复杂度由原来的n^3变为n^2</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> lenNums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lenNums; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lenNums - <span class="number">1</span>; ++j) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j + <span class="number">1</span>] &lt; nums[j]) &#123;</div><div class="line">                tmp = nums[j + <span class="number">1</span>];</div><div class="line">                nums[j + <span class="number">1</span>] = nums[j];</div><div class="line">                nums[j] = tmp;</div><div class="line">                flag = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of arrays of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> **<span class="title">threeSum</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> *returnSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j, k, m;</div><div class="line">    <span class="keyword">int</span> **ret = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> ) * (numsSize*(numsSize<span class="number">-1</span>)*(numsSize<span class="number">-2</span>))/<span class="number">6</span>);</div><div class="line">    *returnSize = <span class="number">0</span>;</div><div class="line">    bubbleSort(nums, numsSize);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i]) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        j = i + <span class="number">1</span>;</div><div class="line">        k = numsSize - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (k &gt; j) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] + nums[i]== <span class="number">0</span>) &#123;</div><div class="line">                ret[*returnSize] = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">3</span>);</div><div class="line">                ret[*returnSize][<span class="number">0</span>] = nums[i];</div><div class="line">                ret[*returnSize][<span class="number">1</span>] = nums[j];</div><div class="line">                ret[*returnSize][<span class="number">2</span>] = nums[k];</div><div class="line">                j++;</div><div class="line">                k--;</div><div class="line">                (*returnSize)++;</div><div class="line">                <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</div><div class="line">                    j++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) &#123;</div><div class="line">                    k--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] + nums[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">                k--;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] + nums[i] &lt; <span class="number">0</span>) &#123;</div><div class="line">                j++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;h3 id
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-求两个有序链表的中位数</title>
    <link href="http://yoursite.com/2019/01/27/%E7%AE%97%E6%B3%95-%E6%B1%82%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2019/01/27/算法-求两个有序链表的中位数/</id>
    <published>2019-01-27T12:34:22.000Z</published>
    <updated>2019-01-28T13:48:34.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p><code>4. Median of Two Sorted Arrays</code><br>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume nums1 and nums2 cannot be both empty.</p><p>Example 1:</p><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>The median is 2.0<br>Example 2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>The median is (2 + 3)/2 = 2.5</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p><code>4. 寻找两个有序数组的中位数</code><br>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p><p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p>你可以假设 nums1 和 nums2 不会同时为空。</p><p>示例 1:</p><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>则中位数是 2.0<br>示例 2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一下午，还是没解出来尴尬。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>官方解题思路</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findMedianSortedArrays</span><span class="params">($nums1, $nums2)</span> </span>&#123;</div><div class="line">        $count1 = count($nums1);</div><div class="line">        $count2 = count($nums2);</div><div class="line">        </div><div class="line">        <span class="comment">//交换$nums1为大一点数组</span></div><div class="line">        <span class="keyword">if</span>($count2 &gt; $count1)</div><div class="line">        &#123;</div><div class="line">            $count1 = $count1 + $count2;</div><div class="line">            $count2 = $count1 - $count2;</div><div class="line">            $count1 = $count1 - $count2;</div><div class="line">            $tmp = $nums1;</div><div class="line">            $nums1 = $nums2;</div><div class="line">            $nums2= $tmp;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        $iMin = <span class="number">0</span>;</div><div class="line">        $iMax = $count2;</div><div class="line">        $halfLen = intval((($count1 + $count2 +<span class="number">1</span>)/<span class="number">2</span>)) ;</div><div class="line">        <span class="keyword">while</span>($iMin &lt;= $iMax)</div><div class="line">        &#123;</div><div class="line">            $i = intval((($iMax+$iMin) /<span class="number">2</span>));</div><div class="line">            $j = $halfLen -$i;</div><div class="line">            <span class="keyword">if</span>($i &lt; $iMax &amp;&amp; $nums1[$j<span class="number">-1</span>] &gt; $nums2[$i])</div><div class="line">            &#123;</div><div class="line">                $iMin = $i + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>($i &gt; $iMin &amp;&amp; $nums2[$i<span class="number">-1</span>] &gt; $nums1[$j])</div><div class="line">            &#123;</div><div class="line">                $iMax = $i<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                $maxLeft = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>($i == <span class="number">0</span>)&#123;$maxLeft = $nums1[$j<span class="number">-1</span>];&#125;</div><div class="line">                <span class="keyword">elseif</span>($j == <span class="number">0</span>)&#123;$maxLeft =  $nums2[$i<span class="number">-1</span>];&#125;</div><div class="line">                <span class="keyword">else</span>&#123;$maxLeft = max($nums2[$i<span class="number">-1</span>],$nums1[$j<span class="number">-1</span>]);&#125;</div><div class="line">                <span class="keyword">if</span>((($count1 + $count2)%<span class="number">2</span>) == <span class="number">1</span>) &#123;<span class="keyword">return</span> $maxLeft;&#125;</div><div class="line">                $minRight = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>($i == $count2)&#123;$minRight = $nums1[$j];&#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>($j == $count1)&#123;$minRight = $nums2[$i];&#125;</div><div class="line">                <span class="keyword">else</span>&#123;$minRight = min($nums1[$j], $nums2[$i]);&#125;</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> ($maxLeft + $minRight)/<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>思路清晰<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">        如果两个数组的中位数 mid1 &lt; mid2, 则说明合并后的中位数位于 num1.right + num2之间</div><div class="line">        否则合并后的中位数位于 nums2.right + nums1 之间 (right 是相对于 mid 而言的) </div><div class="line">        getKth 函数负责找到两个数组合并(假设)后有序的数组中的第 k 个元素, k 从 1 开始计算</div><div class="line">        **/   </div><div class="line">        <span class="keyword">if</span>(nums1.length == <span class="number">0</span> &amp;&amp; nums2.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line">        <span class="keyword">int</span> m = nums1.length, n = nums2.length;</div><div class="line">        <span class="comment">// l: 合并后数组的左半部分的最后一个数 r: 合并后数组的右半部分的第一个数</span></div><div class="line">        <span class="keyword">int</span> l = (m+n+<span class="number">1</span>) / <span class="number">2</span>; </div><div class="line">        <span class="keyword">int</span> r = (m+n+<span class="number">2</span>) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// 如果 m+n 是奇数 getKth 的返回值是相同的, 是偶数则是合并后数组的中间两个数</span></div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, l);</div><div class="line">        <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, l) + getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, r)) / <span class="number">2.0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> st1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> st2, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="comment">// 边界情况, 如果 nums1数组已经穷尽了, 则只能返回 nums2 中的第 k 个元素</span></div><div class="line">        <span class="keyword">if</span>(st1 &gt; nums1.length-<span class="number">1</span>) <span class="keyword">return</span> nums2[st2 + k - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(st2 &gt; nums2.length-<span class="number">1</span>) <span class="keyword">return</span> nums1[st1 + k - <span class="number">1</span>];</div><div class="line">        <span class="comment">// 边界情况, k = 1 则返回两个数组中最小的那个</span></div><div class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[st1], nums2[st2]);</div><div class="line">        <span class="comment">// 在 nums1 和 nums2 当前范围内找出 mid1 和 mid2 判断舍弃哪半部分</span></div><div class="line">        <span class="keyword">int</span> mid1 = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> mid2 = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">if</span>(st1 + k/<span class="number">2</span> - <span class="number">1</span> &lt; nums1.length) mid1 = nums1[st1 + k/<span class="number">2</span> - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(st2 + k/<span class="number">2</span> - <span class="number">1</span> &lt; nums2.length) mid2 = nums2[st2 + k/<span class="number">2</span> - <span class="number">1</span>];</div><div class="line">        <span class="comment">// mid1 &lt; mid2 在 nums1.right 和 nums2 之间搜索, 丢掉 k/2 个数.</span></div><div class="line">        <span class="keyword">if</span>(mid1 &lt; mid2)</div><div class="line">            <span class="keyword">return</span> getKth(nums1, st1 + k/<span class="number">2</span>, nums2, st2, k - k/<span class="number">2</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> getKth(nums1, st1, nums2, st2 + k/<span class="number">2</span>, k - k/<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>自己思路<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findMedianSortedArrays</span><span class="params">($nums1, $nums2)</span> </span>&#123;</div><div class="line">        $count1 = count($nums1);</div><div class="line">        $count2 = count($nums2);</div><div class="line">        <span class="comment">//第一个数组为0情况</span></div><div class="line">        <span class="keyword">if</span>($count1 == <span class="number">0</span> ) &#123;</div><div class="line">            <span class="keyword">if</span>($count2%<span class="number">2</span> ==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> ($nums2[$count2/<span class="number">2</span><span class="number">-1</span>] + $nums2[($count2/<span class="number">2</span>)])/<span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> $nums2[ceil($count2/<span class="number">2</span>)<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//第二个数组为0情况</span></div><div class="line">        <span class="keyword">if</span>($count2 == <span class="number">0</span> ) &#123;</div><div class="line">            <span class="keyword">if</span>($count1%<span class="number">2</span> ==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> ($nums1[$count1/<span class="number">2</span> <span class="number">-1</span>] + $nums1[($count1/<span class="number">2</span>)])/<span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> $nums1[ceil($count1/<span class="number">2</span>) <span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//中位数在两个数组合并以后的位置（从0开始）</span></div><div class="line">        $halfLen = ($count1 + $count2)%<span class="number">2</span> == <span class="number">0</span> ? ($count1 + $count2)/<span class="number">2</span> <span class="number">-1</span> :intval(($count1 + $count2)/<span class="number">2</span>) ;</div><div class="line">        <span class="comment">//交换$nums1为大一点数组</span></div><div class="line">        <span class="keyword">if</span>($count2 &gt; $count1)</div><div class="line">        &#123;</div><div class="line">            $count1 = $count1 + $count2;</div><div class="line">            $count2 = $count1 - $count2;</div><div class="line">            $count1 = $count1 - $count2;</div><div class="line">            $tmp = $nums1;</div><div class="line">            $nums1 = $nums2;</div><div class="line">            $nums2= $tmp;</div><div class="line">        &#125;</div><div class="line">        $ret = <span class="keyword">$this</span>-&gt;Bsearch($nums1, $nums2, <span class="number">0</span>,$count2<span class="number">-1</span>, $halfLen);</div><div class="line">        <span class="keyword">return</span> $ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//递归查找</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Bsearch</span><span class="params">($nums1,$nums2,$start,$end,$halfLen)</span></span></div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//向下取整中位数</span></div><div class="line">        $mid = intval(($start+$end)/<span class="number">2</span>);</div><div class="line">        $poision = $halfLen - $mid<span class="number">-1</span>;</div><div class="line">        <span class="comment">//这里临界值判断</span></div><div class="line">        <span class="keyword">if</span>($start == $end) &#123;</div><div class="line">            <span class="comment">//偶数个</span></div><div class="line">            <span class="keyword">if</span>((count($nums1)+count($nums2))%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>($start == <span class="number">0</span> ) </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &lt; $nums2[$mid])&#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">1</span>;</div><div class="line">                        <span class="keyword">return</span> ($nums1[$poision] +(<span class="keyword">isset</span>($nums1[$poision+<span class="number">1</span>]) ? min($nums1[$poision+<span class="number">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class="number">2</span>; </div><div class="line">                    &#125; </div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">2</span>;</div><div class="line">                        <span class="keyword">return</span> (($nums1[$poision] + (<span class="keyword">isset</span>($nums1[$poision<span class="number">-1</span>]) ? max($nums1[$poision<span class="number">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class="number">2</span>); </div><div class="line">                    &#125;</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">if</span>($start == (count($nums2) <span class="number">-1</span>)) &#123;</div><div class="line">                    <span class="comment">//都是临界值时</span></div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">3</span>;</div><div class="line">                        <span class="keyword">return</span> (($nums1[$poision] + (<span class="keyword">isset</span>($nums1[$poision<span class="number">-1</span>]) ? max($nums1[$poision<span class="number">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class="number">2</span>); </div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &lt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">9</span>;</div><div class="line">                        <span class="keyword">return</span> ($nums1[$poision] +(<span class="keyword">isset</span>($nums1[$poision+<span class="number">1</span>]) ? min($nums1[$poision+<span class="number">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class="number">2</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">echo</span> <span class="number">5</span>;</div><div class="line">                <span class="keyword">return</span> ((<span class="keyword">isset</span>($nums1[$poision+<span class="number">1</span>]) ? min($nums2[$mid], $nums1[$poision+<span class="number">1</span>]) : $nums2[$mid])  + $nums1[$poision])/<span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//基数个</span></div><div class="line">                <span class="keyword">if</span>($start == <span class="number">0</span> ) </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &gt; $nums2[$mid])&#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">6</span>;</div><div class="line">                        <span class="keyword">return</span> $nums2[$mid];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">echo</span> <span class="number">11</span>;</div><div class="line">                    <span class="keyword">return</span> $nums1[$poision];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($start == count($count2)<span class="number">-1</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>($start == $halfLen &amp;&amp; $nums1[$poision] &lt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">7</span>;</div><div class="line">                        <span class="keyword">return</span> $nums1[$poision];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">echo</span> <span class="number">8</span>;</div><div class="line">                    <span class="keyword">return</span> $nums1[$poision];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">echo</span> <span class="number">10</span>;</div><div class="line">                <span class="keyword">echo</span> $poision.<span class="string">"\n"</span>;</div><div class="line">                <span class="keyword">echo</span> $mid.<span class="string">"\n"</span>;</div><div class="line">                <span class="keyword">return</span> $nums1[$poision];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//比对中位数</span></div><div class="line">        <span class="keyword">if</span>($nums2[$mid] &lt; $nums1[$poision])</div><div class="line">        &#123;</div><div class="line">            $ret = <span class="keyword">$this</span>-&gt;Bsearch($nums1, $nums2,  (($mid+<span class="number">1</span> &gt; $end) ? $end : $mid+<span class="number">1</span>), $end, $halfLen);</div><div class="line">        &#125; <span class="keyword">elseif</span>($nums2[$mid] &gt; $nums1[$poision])</div><div class="line">        &#123;</div><div class="line">            $ret = <span class="keyword">$this</span>-&gt;Bsearch($nums1,$nums2,$start ,(($mid<span class="number">-1</span> &lt; $start) ? $start : $mid<span class="number">-1</span>), $halfLen);</div><div class="line">        &#125;<span class="keyword">elseif</span>($nums2[$mid] == $nums1[$poision])</div><div class="line">        &#123;</div><div class="line">            $ret = $nums2[$mid];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;&lt;co
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-水壶问题</title>
    <link href="http://yoursite.com/2019/01/23/%E7%AE%97%E6%B3%95-%E6%B0%B4%E5%A3%B6%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/01/23/算法-水壶问题/</id>
    <published>2019-01-23T07:45:13.000Z</published>
    <updated>2019-01-23T10:24:22.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.</p><p>If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.</p><p>Operations allowed:</p><p>Fill any of the jugs completely with water.<br>Empty any of the jugs.<br>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.<br>Example 1: (From the famous “Die Hard” example)</p><p>Input: x = 3, y = 5, z = 4<br>Output: True<br>Example 2:</p><p>Input: x = 2, y = 6, z = 5<br>Output: False</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？</p><p>如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。</p><p>你允许：</p><p>装满任意一个水壶<br>清空任意一个水壶<br>从一个水壶向另外一个水壶倒水，直到装满或者倒空<br>示例 1: (From the famous “Die Hard” example)</p><p>输入: x = 3, y = 5, z = 4<br>输出: True<br>示例 2:</p><p>输入: x = 2, y = 6, z = 5<br>输出: False</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>需要满足条件：<br>1.两个杯子，如果z&gt;x+y说明两个杯子无法满足。<br>2.如果z=0，则直接返回true;<br>3.如果a||b有一个为0，则另一个一个不等于z时返回false<br>4.ax+by=z,根据这个公式可知，如果z是a,b的最大公约数的整数倍。</p><p>所以该问题可以转化为 z%gcd(x,y) == 0的问题。</p><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><p>以为一定要是gcd，而不能是公约数呢？(裴蜀定理)<br>如何证明？？？</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">canMeasureWater</span><span class="params">($x, $y, $z)</span> </span>&#123;</div><div class="line">        <span class="comment">//排除为0的情况</span></div><div class="line">        <span class="keyword">if</span>($z == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($x == <span class="number">0</span> &amp;&amp; $y == <span class="number">0</span>)</div><div class="line">        &#123;   </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设$x为大 $y为小</span></div><div class="line">        <span class="keyword">if</span>($x&lt;$y)</div><div class="line">        &#123;</div><div class="line">            $x = $x+$y;</div><div class="line">            $y= $x-$y;</div><div class="line">            $x = $x - $y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($x &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> ($y==$z);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($y != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>($z==$x || $z==$y|| $x+$y==$z || $x-$y == $z)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($x+$y&lt; $z) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>($x%$y != <span class="number">0</span>) </div><div class="line">            &#123;</div><div class="line">                $tmp = $x;</div><div class="line">                $x = $y%$x;</div><div class="line">                $y = $tmp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ($z%$y==<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>($z%$x==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;You
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库-mysql索引简介</title>
    <link href="http://yoursite.com/2019/01/18/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%B4%A2%E5%BC%95%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/01/18/数据库-索引简介/</id>
    <published>2019-01-18T03:10:15.000Z</published>
    <updated>2019-01-22T02:37:48.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引<code>b-tree</code>、<code>hash</code>。</p><blockquote><p>这里所指的所有数据库都是指mysql.</p></blockquote><h2 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a>索引的本质</h2><p>mysql官方文档对索引的描述：<code>索引</code>是帮助mysql高效获取数据的数据结构。so 索引的本质是<code>数据结构</code>。涉及到查找的时候肯定避不开查找算法，例如<code>顺序查找</code>、<code>二分查找</code>。随着人们对查找性能要求的越来越高就延伸出来了基于树的查找，例如<code>二叉树的查找</code>。当然即使是<code>二叉树的查找</code>也无法满足现在程序对于查找性能的要求，进而出现了基于<code>b-tree</code>、<code>hash</code>的查找。可以分析下查找的演变过程，所有的查找都是基于一定的数据结构，例如最开始<code>顺序查找</code>基于链表、<code>二分查找</code>基于有序链表、<code>二叉树查找</code>基于树。这种为了满足这种<strong>高效小的查询效率</strong>所衍伸出来的数据结构就是<strong>索引</strong>。</p><h2 id="索引的选择"><a href="#索引的选择" class="headerlink" title="索引的选择"></a>索引的选择</h2><p>基于树的查找效率由树的深度决定，所以二叉树是无法满足查询速度的要求，mysql的索引主要使用 <code>b+tree</code>。</p><h3 id="b-tree"><a href="#b-tree" class="headerlink" title="b-tree"></a>b-tree</h3><p><code>b-树</code>（由b-tree翻译过来）也就是b树，是一种路自平衡搜索树。如果我们以一个二元组来表示索引的内容的话（[key,val]）,key表示键值，val表示数据（地址或者主键），则<code>b-树</code>有以下特点。</p><blockquote><p>树的度的定义：每个节点包含子树的个数。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>所有的键值分布在整个树种（包括叶子节点和非叶子节点）</li><li>任何<strong>key</strong>只会出现一次</li><li>所有的叶子节点必须在同一层次，也就是他们具有相同的深度。</li><li>每个节点里的关键字是有序的（一个结点中的key从左至右非递减排列），当前节点的左右两个指针指向的节点，左指针指向的节点的key小于当前节点，右指针指向的节点的key大于当前节点。</li><li>d&gt;=2,每个节点有n-1个<code>key</code> 和n个指针，d&lt;=n&lt;=2d。</li></ul></blockquote><p>假设b-tree的度为d,高为h，其索引个数为N。则<code>h=logd((n+1)/2)</code>，查找一条数据的渐进复杂度为<code>logdn</code>。由于索引数量n和其高度h程对数关系（实际使用中d一般会大于100），所以即使是key很大，查询效率也会很快，分析可以的出b-tree查找一个最多需要<strong>h-1</strong>次磁盘io。<br>举个栗子一个度为1001，高度为2（不包含根节点）的b-tree可以存储超高10亿的数据，且每个节点如果使用二分查找的话，只需要三次查找就可以查询到所需的数据。</p><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><p><img src="/photo/img/数据库索引/b-tree.png" alt="image"></p><h3 id="b-tree-1"><a href="#b-tree-1" class="headerlink" title="b+tree"></a>b+tree</h3><p>b+tree是是b-tree的升级版，所有的data值存在叶子节点。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>b+tree树只有叶子节点包含data，非叶子节点只存key与指针</li><li>所有的叶子节点为一个链表</li></ul><h4 id="结构图-1"><a href="#结构图-1" class="headerlink" title="结构图"></a>结构图</h4><p><img src="/photo/img/数据库索引/b+tree.png" alt="image"></p><h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><ul><li>聚簇索引 ：索引和文件为同一个文件。</li><li>非聚簇索引： 索引和数据文件分开的索引。</li></ul><p>MyISAM 和 InnoDb都使用<code>b+tree</code>索引结构，但是底层确实不一样的，MyISAM采用的事非聚簇索引，而innoDB采用的是聚簇索引。</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM索引原理 : 采用的费聚簇索引 My-ISAM myi索引文件和myd数据文件分离，索引文件值保存数据记录和指针地址。叶子节点data存执指向数据记录的地址。</p><p><img src="/photo/img/数据库索引/MyISAM.png" alt="image"></p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>InnoDB物理存储文件结构说明：<br>InnoDB以表空间Tablespace(idb文件)结构进行组织，每个Tablespace包含多个Segment段（Segment 分为为叶子节点和飞叶子节点Segment），一个Segment段包含多个Extent,一个Extent占用1M空间且包含64page,innoDB b+tree一个逻辑节点就分配一个屋里Page,一个节点一次io操作。一个page里包含d个Row行数据，行数据包<br>每一个索引是一个b+tree，一个节点是=一个page(16k)。数据会按照16kb切片为page并编号，标号可以通过偏移量（16k*n）找到文件存储地址。且叶子节点为双向链表，数据按主键索引聚簇索，二级索引叶子节点存储主键值，除了覆盖索引其他二级索引都通过主键查找数据。</p><p><img src="/photo/img/数据库索引/InnoDB.png" alt="image"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>InnoDB采用聚簇索引，存储于idb文件里，表数据本身就是主索引，相邻的索引临近存储。叶节点data域保存了完整的数据记录（data(除主键外所有数据）+key(主键)）。也是由于这种方式InnoDB必须建指定主键，如通过没有指定主键则mysql自动选择一个可以唯一表示数据记录的列作为主键。如果这样的列不存在，mysql自动为表生成一个隐含字段（6个字节长整型）作为主键。</p><blockquote><p>mysql所有的辅助索引data存储皆为主键值</p></blockquote><p>结构图<br><img src="/photo/img/数据库索引/InnoDB2.png" alt="image"></p><h4 id="查询流程"><a href="#查询流程" class="headerlink" title="查询流程"></a>查询流程</h4><p>1.索引精确查找<br>确定定位条件, 找到根节点Page No, 根节点读到内存, 逐层向下查找, 读取叶子节点Page,通过 二分查找找到记录或未命中。（select * from user_info where id = 23）</p><p><img src="/photo/img/数据库索引/精确查找.png" alt="image"></p><p>2.索引范围查找<br>读取根节点至内存, 确定索引定位条件id=18, 找到满足条件第一个叶节点<br>, 顺序扫描所有结果, 直到终止条件满足id &gt;=22 （select * from user_info where id &gt;= 18 and id &lt; 22）<br><img src="/photo/img/数据库索引/范围查找.png" alt="image"></p><p>3.全表扫描<br>直接读取叶节点头结点， 顺序扫描， 返回符合条件记录， 到最终节点结束<br>（select * from user_info where name = ‘abc’）</p><p><img src="/photo/img/数据库索引/扫全表.png" alt="image"></p><p>4.二级索引查找<br>建立索引<br>Create table table_x(int id primary key, varchar(64) name,key sec_index(name) )</p><p>如果执行<code>select * from table_x where name = &#39;xxxx&#39;</code></p><p><img src="/photo/img/数据库索引/二级索引查找.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="mysql为什么选择b-tree"><a href="#mysql为什么选择b-tree" class="headerlink" title="mysql为什么选择b+tree"></a>mysql为什么选择b+tree</h3><p>内存读取和存盘读取不在一个数量级，所以一般内存读取相较于与磁盘io可以忽略不计。一般来说，索引的大小是无法全部存在ram里的so衡量一个索引的优劣可以以磁盘io次数来衡量。这里就可以排除h黑大的红黑树。<br><code>b-tree</code>和<code>b+tree</code>一次检索最多需要查询<strong>h-1</strong>个节点,但是<code>b+tree</code>不存data数据，索引可以存的key更多，这样查询的节点数也就也少，磁盘io也就越少。</p><blockquote><p>详解：Mysql设计利用了磁盘预读原理，将一个B+Tree节点大小设为一个页大小，在新建节点时直接申请一个页的空间，这样就能保证一个节点物理上存储在一个页里，加之计算机存储分配都是按页对齐的，这样就实现了每个Node节点只需要一次I/O操作。(一个物理Page16K)</p></blockquote><p>一般一个key的大小为8b指针的大小也为8b,这样一个page可以存储(16k/16b=1000)条记录，n层数据可以存储k的n次方跳数据，一亿条数据也不过3层而已，可谓非常高效。</p><h3 id="为什么要建立索引"><a href="#为什么要建立索引" class="headerlink" title="为什么要建立索引"></a>为什么要建立索引</h3><p>如<code>全表扫描</code>扫描那样，我们不能保证每次查询都能在前几个page里查询到所需的数据，目标数据越往后，查询效率就越慢，如果有1亿跳数据，数据查询将会慢的恐怕。</p><h3 id="是否索引越多越好"><a href="#是否索引越多越好" class="headerlink" title="是否索引越多越好"></a>是否索引越多越好</h3><p>每一个索引都是一个树，每次插入和删除都可能破坏原有的树，当树破坏是mysql需要重新把树平衡，这会消耗资源，所以索引不宜过多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引&lt;code&gt;b-tree&lt;/code&gt;、&lt;code&gt;hash&lt;/code&gt;。
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-树</title>
    <link href="http://yoursite.com/2019/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
    <id>http://yoursite.com/2019/01/18/数据结构-树/</id>
    <published>2019-01-18T01:30:16.000Z</published>
    <updated>2019-01-18T01:30:16.018Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法-俄罗斯套娃问题</title>
    <link href="http://yoursite.com/2019/01/17/%E7%AE%97%E6%B3%95-%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/01/17/算法-俄罗斯套娃问题/</id>
    <published>2019-01-17T03:14:20.000Z</published>
    <updated>2019-01-28T13:48:09.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p><p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p><p>Note:<br>Rotation is not allowed.</p><p>Example:</p><p>Input: [[5,4],[6,4],[6,7],[2,3]]<br>Output: 3<br>Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]).</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p><p>请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p><p>说明:<br>不允许旋转信封。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>首先对数组进行基数排序（如果不排序，直接计算每个节点的套娃数会消耗大量时间）</li><li>遍历每个节点，计算每个节点最大套娃数</li><li>返回最大套娃数。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">maxEnvelopes</span><span class="params">($envelopes)</span> </span>&#123;</div><div class="line">        $nums = count($envelopes);</div><div class="line">        <span class="keyword">if</span>($nums &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//实现基数排序</span></div><div class="line">        sort($envelopes);</div><div class="line">        <span class="comment">// var_dump($envelopes);</span></div><div class="line">        $nums = count($envelopes);</div><div class="line"></div><div class="line">        $dp[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>($i = <span class="number">1</span>; $i &lt; $nums; $i++)</div><div class="line">        &#123;</div><div class="line">            $dp[$i] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>($j = <span class="number">0</span>; $j&lt; $i; $j ++)&#123;</div><div class="line">                <span class="keyword">if</span>($envelopes[$i][<span class="number">0</span>] &gt; $envelopes[$j][<span class="number">0</span>] &amp;&amp; $envelopes[$i][<span class="number">1</span>] &gt; $envelopes[$j][<span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    $tmp = $dp[$j] +<span class="number">1</span>;</div><div class="line">                    $dp[$i]  = max($dp[$i], $tmp); </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max($dp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>php下的<code>sort</code>是如何实现？ 如何实现<code>基数排序</code>？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;You
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-求第k个排序</title>
    <link href="http://yoursite.com/2019/01/16/%E7%AE%97%E6%B3%95-%E6%B1%82%E7%AC%ACk%E4%B8%AA%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/01/16/算法-求第k个排序/</id>
    <published>2019-01-16T15:57:21.000Z</published>
    <updated>2019-01-29T07:41:40.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p><p>By listing and labeling all of the permutations in order, we get the following sequence for n = 3:</p><p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>Given n and k, return the kth permutation sequence.</p><p>Note:</p><p>Given n will be between 1 and 9 inclusive.<br>Given k will be between 1 and n! inclusive.<br>Example 1:</p><p>Input: n = 3, k = 3<br>Output: “213”<br>Example 2:</p><p>Input: n = 4, k = 9<br>Output: “2314”</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：</p><p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>给定 n 和 k，返回第 k 个排列。</p><p>说明：</p><p>给定 n 的范围是 [1, 9]。<br>给定 k 的范围是[1,  n!]。<br>示例 1:</p><p>输入: n = 3, k = 3<br>输出: “213”<br>示例 2:</p><p>输入: n = 4, k = 9<br>输出: “2314”</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>排列的每一个位置都有一个固定的进位（如果当前数固定，可以有多少种排列），当k达到前进位是，则改位置加1。</li><li>从最左（进位最大）开始，依次用当前进位对k-1做除法（（k-1）/当前进位)，如果结果不为0，则用<code>结果</code>+当前能够使用的最小值，获得当前位置的值。</li><li>用余数当做k,按照第二步的思路，求其余位置的值。</li></ul><p>##代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span>* result = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    <span class="keyword">bool</span>* flag = (<span class="keyword">bool</span>*)<span class="built_in">calloc</span>(n, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>));</div><div class="line">    <span class="keyword">int</span> temp[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line">    temp[n] = <span class="number">1</span>;</div><div class="line">    temp[n - <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>, idx = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = n - <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</div><div class="line">        temp[i] = temp[i + <span class="number">1</span>] * (n - i);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        t = (k - <span class="number">1</span>) / temp[i];</div><div class="line">        idx = t;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">            <span class="comment">//第j小未使用的数，j为上述计算得来。</span></div><div class="line">            <span class="keyword">if</span>(!flag[j]) &#123;</div><div class="line">                t--;</div><div class="line">                <span class="keyword">if</span>(t == <span class="number">-1</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        result[i - <span class="number">1</span>] = <span class="string">'0'</span> + j;</div><div class="line">        flag[j] = <span class="literal">true</span>;</div><div class="line">        k -= idx * temp[i];</div><div class="line">    &#125;</div><div class="line">    result[n] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">free</span>(flag);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;The
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-三角形最小路径和</title>
    <link href="http://yoursite.com/2019/01/15/%E7%AE%97%E6%B3%95-%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/15/算法-三角形最小路径和/</id>
    <published>2019-01-15T08:51:56.000Z</published>
    <updated>2019-01-28T13:47:51.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span>* result = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    <span class="keyword">bool</span>* flag = (<span class="keyword">bool</span>*)<span class="built_in">calloc</span>(n, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>));</div><div class="line">    <span class="keyword">int</span> temp[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line">    temp[n] = <span class="number">1</span>;</div><div class="line">    temp[n - <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>, idx = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = n - <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</div><div class="line">        temp[i] = temp[i + <span class="number">1</span>] * (n - i);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        t = (k - <span class="number">1</span>) / temp[i];</div><div class="line">        idx = t;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">            <span class="comment">//取当前最小的未使用的数值</span></div><div class="line">            <span class="keyword">if</span>(!flag[j]) &#123;</div><div class="line">                t--;</div><div class="line">                <span class="keyword">if</span>(t == <span class="number">-1</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        result[i - <span class="number">1</span>] = <span class="string">'0'</span> + j;</div><div class="line">        flag[j] = <span class="literal">true</span>;</div><div class="line">        k -= idx * temp[i];</div><div class="line">    &#125;</div><div class="line">    result[n] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">free</span>(flag);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;h2 id
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-最大子序和</title>
    <link href="http://yoursite.com/2019/01/14/%E7%AE%97%E6%B3%95-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/14/算法-最大子序和/</id>
    <published>2019-01-14T13:43:04.000Z</published>
    <updated>2019-01-14T14:03:13.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p>Example:</p><p>Input: [-2,1,-3,4,-1,2,1,-5,4],<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>动态规划。</li><li>把求联系最大子序列转化为求当前节点与上一节点的最大值。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(numsSize == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(numsSize &lt;=<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> *nums;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> pre =  *nums ;</div><div class="line">    nums++;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> ret = pre;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; numsSize;i++)</div><div class="line">   &#123;</div><div class="line">      </div><div class="line">       tmp = (pre + *nums) &gt; *nums ? (pre + *nums) : *nums;</div><div class="line">       </div><div class="line">           <span class="comment">// printf("tmp:%d\n", tmp);</span></div><div class="line">           <span class="keyword">if</span>(tmp &gt; ret)</div><div class="line">           &#123;</div><div class="line">               ret = tmp;</div><div class="line">           &#125;</div><div class="line">        </div><div class="line">       </div><div class="line">       pre = tmp;</div><div class="line">       nums++;</div><div class="line">   &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-求最大正方形面积</title>
    <link href="http://yoursite.com/2019/01/14/%E7%AE%97%E6%B3%95-%E6%B1%82%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
    <id>http://yoursite.com/2019/01/14/算法-求最大正方形面积/</id>
    <published>2019-01-14T09:18:04.000Z</published>
    <updated>2019-01-14T11:25:28.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p><p>Example:</p><p>Input: </p><p>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0</p><p>Output: 4</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>动态规划(主要用户将一个复杂的问题分解为多个建单的问题，求最优解时)。</li><li>声明一个空间和原有二位数据大小一样的二位数组(tmp[i][j])。</li><li>计算每一个节点最大正方形的边长，并存储与该节点（利用之前节点计算当前节点最大正方形边长）。</li><li>取tmp[i][j]得最大值的平凡返回。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li></ul><p><code>第一版代码</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">maximalSquare</span><span class="params">($matrix)</span> </span>&#123;</div><div class="line">      $hight =  count($matrix);</div><div class="line">      <span class="keyword">if</span>($hight&lt;<span class="number">1</span>)</div><div class="line">      &#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">      $wide = <span class="number">0</span>;</div><div class="line">      <span class="keyword">if</span>($hight &gt; <span class="number">0</span>)&#123;</div><div class="line">          $wide= count($matrix[<span class="number">0</span>]);</div><div class="line">      &#125;</div><div class="line">      $ret = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>($i = <span class="number">1</span>; $i&lt;= $hight; $i++)</div><div class="line">      &#123;</div><div class="line">          $tmp = <span class="keyword">$this</span>-&gt;getRet($matrix, $i, $hight, $wide);</div><div class="line">          <span class="keyword">if</span>($ret &lt;$tmp )&#123;</div><div class="line">              $ret = $tmp;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> $ret;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRet</span><span class="params">($matrix, $i, $hight, $wide)</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="comment">//起始点纵向坐标  </span></div><div class="line">    <span class="keyword">for</span>($h = <span class="number">0</span>; $h&lt;= $hight-$i; $h++ )</div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt;= $wide-$i; $j++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//h 为起点高，j为起点宽。</span></div><div class="line">            $ret = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>($m = $h; $m &lt;$h + $i; $m++)&#123;</div><div class="line">                <span class="keyword">for</span>($k = $j; $k &lt; $j + $i; $k++)&#123;</div><div class="line">                    <span class="keyword">if</span>($matrix[$m][$k] == <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        $ret = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($ret == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($ret == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">return</span> $i*$i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用php跑测试用例，跑了2.5秒。😓</p><p>回头用c重写下试试。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">待定</div></pre></td></tr></table></figure></p><h2 id="最优解"><a href="#最优解" class="headerlink" title="最优解"></a>最优解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">        dp[i][j]表示以第i行第j列为右下角所能构成的最大正方形边长, 则递推式为: </div><div class="line">        dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]);</div><div class="line">        **/</div><div class="line">        <span class="keyword">int</span> m = matrix.length;</div><div class="line">        <span class="keyword">if</span>(m &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</div><div class="line">                    dp[i][j] = <span class="number">1</span> + Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]));</div><div class="line">                    max = Math.max(max, dp[i][j]); </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> max*max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树最近公共祖先</title>
    <link href="http://yoursite.com/2019/01/10/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://yoursite.com/2019/01/10/算法-二叉树最近公共祖先/</id>
    <published>2019-01-10T14:59:11.000Z</published>
    <updated>2019-01-28T13:47:41.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="原有思路"><a href="#原有思路" class="headerlink" title="原有思路"></a>原有思路</h3><ul><li>查询有两个子节点有两个目标节点的节点。</li><li>然后查询当前节点的左右子节点，如果有一个子节点的子节点只包含一个目标节点，则他的父节点则为最近公共祖先。</li></ul><h2 id="改良后思路"><a href="#改良后思路" class="headerlink" title="改良后思路"></a>改良后思路</h2><ul><li>目标节点一定存在于当前树。</li><li>中序遍历所有节点，如果当前接电接点或者其子节点匹配到了目标节点，则返回当前节点。</li><li>如果当前节点的左右节点分别匹配到了一个目标节点（root == null || p || q 直接返回root），则当前节点是最近公共祖先。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li></ul><p><code>原版代码</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">leftFist</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode*  q)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">        ret =  ret + leftFist(root-&gt;left, p, q);</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(root-&gt;right)&#123;</div><div class="line">        ret = ret+ leftFist(root-&gt;right, p, q);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root == p) &#123;</div><div class="line">        ret +=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root == q) &#123;</div><div class="line">        ret +=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct TreeNode *left;</div><div class="line"> *     struct TreeNode *right;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode* q)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> TreeNode* retRoot = <span class="literal">NULL</span> ;</div><div class="line">    <span class="keyword">int</span> retSum =  leftFist(root, p, q);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(retSum ==  <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">int</span> retSumleft = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">            retSumleft = leftFist(root-&gt;left, p, q);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> &lt; retSumleft &amp;&amp;  retSumleft &lt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">// printf("retSumleft:%d,", root-&gt;left-&gt;val);</span></div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> retSumright = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(root-&gt;right) &#123;</div><div class="line">            retSumright = leftFist(root-&gt;right, p, q);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> &lt; retSumright &amp;&amp; retSumright&lt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">// printf("retSumright:%d", root-&gt;right-&gt;val);</span></div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">        retRoot =  lowestCommonAncestor(root-&gt;left, p, q);</div><div class="line">        <span class="keyword">if</span>(retRoot) &#123;</div><div class="line">            <span class="keyword">return</span> retRoot;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(root-&gt;right)&#123;</div><div class="line">        retRoot =  lowestCommonAncestor(root-&gt;right, p, q);</div><div class="line">        <span class="keyword">if</span>(retRoot) &#123;</div><div class="line">            <span class="keyword">return</span> retRoot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> retRoot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>c语言让我跑了1888ms。。</p><h3 id="优化解"><a href="#优化解" class="headerlink" title="优化解"></a>优化解</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct TreeNode *left;</div><div class="line"> *     struct TreeNode *right;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode* q)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span>(root == <span class="literal">NULL</span> || root == p || root == q) &#123;</div><div class="line">       <span class="keyword">return</span> root;</div><div class="line">   &#125;</div><div class="line">    <span class="keyword">struct</span> TreeNode* left = lowestCommonAncestor(root-&gt;left, p ,q);</div><div class="line">    <span class="keyword">struct</span> TreeNode* right = lowestCommonAncestor(root-&gt;right, p ,q);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(left == <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(left != <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> root;</div><div class="line">    <span class="keyword">return</span> (left == <span class="literal">NULL</span> ? right : left);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>12ms</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>合并k个链表</title>
    <link href="http://yoursite.com/2019/01/10/%E7%AE%97%E6%B3%95-%E5%90%88%E5%B9%B6k%E4%B8%AA%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/01/10/算法-合并k个链表/</id>
    <published>2019-01-10T08:09:18.000Z</published>
    <updated>2019-01-29T07:24:46.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p>示例:</p><p>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>如果理由<code>最后选择</code>进行合并链表，这是时间复杂度是<code>kn</code>如果 <code>k</code> 很大的时候时间复杂度简直爆炸，还不如直接合并。</li><li>如果使用归并排序 时间复杂度是<code>nlogk</code>。</li><li>如果直接两两暴力合并，时间复杂度是<code>n(k^2+k)/2</code></li><li>所以当k很大的时候，最优解应该是并归。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">struct</span> ListNode* <span class="title">merge</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> ListNode* l3 = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">struct</span> ListNode* p = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">struct</span> ListNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(!l1 &amp;&amp; !l2) &#123;</div><div class="line">        <span class="keyword">return</span> l3;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(l1 &amp;&amp; !l2) &#123;</div><div class="line">        <span class="keyword">return</span> l1;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!l1 &amp;&amp; l2)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> l2;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置头结点</span></div><div class="line">    <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val) &#123;</div><div class="line">        l3 = l1;</div><div class="line">        l1 = l1-&gt;next;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        l3 = l2;</div><div class="line">        l2 = l2-&gt;next;</div><div class="line">    &#125;    </div><div class="line">    p = l3;</div><div class="line">    <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">        &#123;</div><div class="line">            tmp = l1-&gt;next;</div><div class="line">            p-&gt;next = l1;</div><div class="line">            l1 = tmp;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tmp = l2-&gt;next;</div><div class="line">            p-&gt;next = l2;</div><div class="line">            l2 = tmp;</div><div class="line">        &#125;</div><div class="line">        p = p-&gt;next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(l1) &#123;</div><div class="line">        p-&gt;next = l1;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(l2)</div><div class="line">    &#123;</div><div class="line">        p-&gt;next = l2;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> l3;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct ListNode *next;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="keyword">struct</span> ListNode** lists, <span class="keyword">int</span> listsSize)</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(listsSize == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(listsSize == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> (*lists);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">struct</span> ListNode* ret = (*lists);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; listsSize; i++)</div><div class="line">    &#123;</div><div class="line">        lists++;</div><div class="line">        ret = merge((*lists), ret);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>尝试寻找更优解法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入:&lt;br&gt;[&lt;br&gt;  1-
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>tcp三次握手与四次挥手</title>
    <link href="http://yoursite.com/2019/01/09/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://yoursite.com/2019/01/09/tcp三次握手与四次挥手/</id>
    <published>2019-01-09T14:16:19.000Z</published>
    <updated>2019-01-09T14:17:44.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><code>三次握手</code> 是指tcp建立连接时候需要服务端和客户端发送三个网络包。<br>三次握手的目的是链接与服务器端口，并建立tcp连接，并同步连接双方的序列号和确认号，并交换tcp窗口大小信息。</p><p><img src="/photo/img/tcp三次握手与四次挥手/tcp握手.png" alt="image"><br>在tcp/ip协议中, tcp提供可靠的链接服务，采用三次握手建立一个链接，如上图所示。</p><ul><li>第一次握手：建立连接时，客户端发送SYN包到服务器，同时进入SYN_SEND状态，等待服务器B确认。</li><li>第二次握手：服务器B收到SYN包，确认客户端的SYN(ACK+1),同时自己发送一个SYN包，此时服务器进入SYN_RECV状态。</li><li>第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包（ACK+1）,此包发送完毕，客户端和服务端进入RESTABLISHED状态，完成三次握手。<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2>tcp断开连接需要发送四个包，所以称之为 <code>四次挥手</code>,客户端和服务端都可以发起<code>挥手</code>。</li></ul><p><img src="/photo/img/tcp三次握手与四次挥手/tcp四次挥手.png" alt="image"></p><p>由于TCP是全双工的，所以需要双向关闭。原则是当一方完成数据发送后就只能发送一个FIN来终止这个方向的链接。收到一个FIN只意味着这个一个方向没有数据发送，一个tcp链接收到一个FIN后仍然能发送数据。首先关闭的以防进行主动关闭，另外以防执行被动关闭。</p><ul><li>主动方发送一个FIN,用来告诉被动方我发送完毕，请求关闭链接。</li><li>被动方收到主动方的FIN请求，会回发一个ACK(我知道了)，但是并没有统一关闭链接。</li><li>当被动方也发送完数据了，会发送一个FIN包，高速主动方我也发送完了。</li><li>主动方收到被动方的FIN包，回复ACK(确认收到)，此时tcp断开连接。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三次握手&quot;&gt;&lt;a href=&quot;#三次握手&quot; class=&quot;headerlink&quot; title=&quot;三次握手&quot;&gt;&lt;/a&gt;三次握手&lt;/h2&gt;&lt;p&gt;&lt;code&gt;三次握手&lt;/code&gt; 是指tcp建立连接时候需要服务端和客户端发送三个网络包。&lt;br&gt;三次握手的目的是链接与服
      
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>算法-链表相交(ntersection of Two Linked Lists)</title>
    <link href="http://yoursite.com/2019/01/08/%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/"/>
    <id>http://yoursite.com/2019/01/08/算法-链表相交/</id>
    <published>2019-01-08T09:11:56.000Z</published>
    <updated>2019-01-28T08:17:50.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个程序，找到两个单链表相交的起始节点<br>注意：</p><ul><li>如果两个链表没有交点，返回 null.</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>存在两个链表 <code>headA</code> <code>headB</code>。定义两个指针 <code>a</code> <code>b</code>分别对应<code>headA</code> <code>headB</code></li><li>循环<code>a</code> <code>b</code> 直至到达链表的尾部，然后将<code>a</code>指向<code>headB</code>、将<code>b</code>指向<code>headA</code> ,继续循环直至出现<code>a==b</code>的情况，或者任意一个链表到达终点。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct ListNode *next;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> ListNode *<span class="title">getIntersectionNode</span><span class="params">(<span class="keyword">struct</span> ListNode *headA, <span class="keyword">struct</span> ListNode *headB)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> ListNode *a = headA;</div><div class="line">    <span class="keyword">struct</span> ListNode *b = headB;</div><div class="line">    <span class="keyword">int</span> aDone =<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> bDone =<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a == b) &#123;</div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a &amp;&amp; a-&gt;next) &#123;</div><div class="line">            a =  a-&gt;next;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(aDone != <span class="number">1</span>) &#123;</div><div class="line">               a = headB;</div><div class="line">               aDone = <span class="number">1</span>; </div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125; </div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(b &amp;&amp; b-&gt;next )</div><div class="line">        &#123;</div><div class="line">            b = b-&gt;next;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(bDone != <span class="number">1</span>) &#123;</div><div class="line">                b = headA;</div><div class="line">                bDone =<span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;编写一个程序，找到两个单链表相交的起始节点&lt;br&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个链表没有交点，返回 null.&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库-隔离级别</title>
    <link href="http://yoursite.com/2018/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93-%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://yoursite.com/2018/12/23/数据库-隔离级别/</id>
    <published>2018-12-23T12:34:25.000Z</published>
    <updated>2019-01-28T10:24:55.235Z</updated>
    
    <content type="html"><![CDATA[<p>SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。</p><h2 id="READ-COMMITTED-未提交读"><a href="#READ-COMMITTED-未提交读" class="headerlink" title="READ COMMITTED(未提交读)"></a>READ COMMITTED(未提交读)</h2><p>顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为<code>脏读</code>。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。</p><p>eg:<br>业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。</p><h2 id="READ-COMMITED-提交读"><a href="#READ-COMMITED-提交读" class="headerlink" title="READ COMMITED(提交读)"></a>READ COMMITED(提交读)</h2><p>多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。<br>提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。</p><p>eg:<br>当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。<br>提交读避免了<code>脏读</code>，但是却产生了<code>不可重复读</code>（同一事务内）。</p><h2 id="Repeatable-read-（重复读）"><a href="#Repeatable-read-（重复读）" class="headerlink" title="Repeatable read （重复读）"></a>Repeatable read （重复读）</h2><p>重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。</p><p>例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。</p><h2 id="Serializable-（序列化）"><a href="#Serializable-（序列化）" class="headerlink" title="Serializable （序列化）"></a>Serializable （序列化）</h2><p>Serializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。</p><h2 id="几个名词"><a href="#几个名词" class="headerlink" title="几个名词"></a>几个名词</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。</p><h3 id="不可重复读。"><a href="#不可重复读。" class="headerlink" title="不可重复读。"></a>不可重复读。</h3><p>指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>幻读是在<code>可重复读</code>的隔离级别下产生的问题。<code>可重复读</code>虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称<code>幻行</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。&lt;/p&gt;
&lt;h2 id=&quot;READ-COMMITTED-未提交读&quot;&gt;&lt;a href=&quot;#READ-COMMITTED-未提交读&quot; clas
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>kong</title>
    <link href="http://yoursite.com/2018/12/02/kong/"/>
    <id>http://yoursite.com/2018/12/02/kong/</id>
    <published>2018-12-02T11:02:17.000Z</published>
    <updated>2019-01-08T10:54:35.667Z</updated>
    
    <content type="html"><![CDATA[<p>当前系统，环境centos7<br>起kong服务需要做：</p><ul><li>安装<ul><li>kong</li><li>pgsql</li><li>dashboard(可选，用来通过api来管理空)</li></ul></li><li>配置<ul><li>kong.conf（配置数据库等）、配置路由。</li><li>pgsql配置（新建数据库）</li><li>配置kong路由</li></ul></li><li>注意事项<ul><li>尽量安装高版本，防止和pgsql不兼容。</li></ul></li></ul><h1 id="1-安装kong"><a href="#1-安装kong" class="headerlink" title="1.安装kong"></a>1.安装kong</h1><ul><li>需要安装kong</li><li>安装pgsql</li></ul><p>官方文档提供的快速安装地址<code>https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867</code></p><p>step1:<br><code>baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7</code> 各个版本的地址，下载要安装的版本。<br>wget <code>https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm</code><br>srep2:<br>执行下边命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo yum install epel-release</div><div class="line">sudo yum install kong-community-edition-0.14.1.*.noarch.rpm --nogpgcheck</div></pre></td></tr></table></figure></p><p>安装完成，这个时候是起不来额，因为没有安装pgsql。</p><h1 id="2-安装postgresql10"><a href="#2-安装postgresql10" class="headerlink" title="2.安装postgresql10"></a>2.安装postgresql10</h1><p>尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择<code>kong-community-edition-0.14.1.el7.noarch.rpm</code>版本，当然也在测试机测试没有问题。<br>官方地址<code>https://www.postgresql.org/download/linux/redhat/</code> 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6</p><p>postgresql10安装与启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm    </div><div class="line">yum install postgresql10    </div><div class="line">yum install postgresql10-server</div><div class="line">/usr/pgsql-10/bin/postgresql-10-setup initdb  </div><div class="line">systemctl enable postgresql-10  </div><div class="line">systemctl start postgresql-10</div></pre></td></tr></table></figure></p><p>安装完成后，还需要做：</p><ol><li>配置postgreps用户。</li><li>新增和数据库。</li><li>配置远程连接。</li></ol><p>添加用户以及新增数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo -s  //取得root权限</div><div class="line">su - postgres </div><div class="line">psql -U postgres //连接本地数据</div><div class="line"></div><div class="line">postgres=# CREATE USER kong WITH LOGIN PASSWORD &apos;kong&apos;;  //创建用户</div><div class="line">postgres-# CREATE ROLE //返回CREATE ROLE，表示创建用户成功</div><div class="line"></div><div class="line">postgres=# CREATE DATABASE kong; //创建数据库</div><div class="line">CREATE DATABASE //返回CREATE DATABASE，表示创建数据库成功.</div></pre></td></tr></table></figure></p><p>然后初始化数据库:<code>sudo /usr/local/bin/kong migrations up</code></p><p>修改pgsql,配置远程连接：<br>执行<code>vim /var/lib/pgsql/10/data/pg_hba.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//修改 127.0.0.1/32 为trust</div><div class="line">host    all             all             127.0.0.1/32            trust</div><div class="line">//添加下边这条记录，用于ssl连接</div><div class="line">host    all             all             0.0.0.0/0               md5</div></pre></td></tr></table></figure></p><p><img src="/photo/img/kong/pg_hba.conf.png" alt="image"></p><p>执行<code>vim /var/lib/pgsql/10/data/postgresql.conf</code><br>添加一下信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listen_addresses = &apos;*&apos; //允许所有的ip访问postgres</div></pre></td></tr></table></figure></p><h1 id="3-配置kong-conf"><a href="#3-配置kong-conf" class="headerlink" title="3.配置kong.conf"></a>3.配置kong.conf</h1><p>执行 <code>vi /etc/kong/kong.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pg_host = 127.0.0.1             # The PostgreSQL host to connect to.</div><div class="line">pg_port = 5432                  # The port to connect to.</div><div class="line">pg_user = kong                  # The username to authenticate if required.</div><div class="line">pg_password = kong                  # The password to authenticate if required.</div><div class="line">pg_database = kong              # The database name to connect to.</div></pre></td></tr></table></figure><p>执行<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code>,提示<code>Kong started</code>则代表启动成功</p><p><code>curl -i http://localhost:8001/</code>,测试kong是否启动。也可以访问<code>http://host:8000/</code>,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：<br><img src="/photo/img/kong/kong-404.png" alt="image"></p><h1 id="4-配置dashboard"><a href="#4-配置dashboard" class="headerlink" title="4.配置dashboard"></a>4.配置dashboard</h1><p>前置操作：需要安装nodejs<br><code>sudo yum install nodejs</code></p><p>kong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。<br>开源项目地址<code>https://github.com/PGBI/kong-dashboard</code></p><p>安装命令<code>npm install -g kong-dashboard</code></p><p>启动命令：<code>nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2&gt;&amp;1 &amp;</code></p><p>为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。<br>修改work的环境变量 vi ~.bash_profile，添加password参数。<br>kong-dashboard start \<br>  –kong-url <a href="http://kong:8001" target="_blank" rel="noopener">http://kong:8001</a> \<br>  –basic-auth work=$password</p><h1 id="5-日志目录以及启动相关"><a href="#5-日志目录以及启动相关" class="headerlink" title="5.日志目录以及启动相关"></a>5.日志目录以及启动相关</h1><p>查看日志文件<code>tail -f /usr/local/kong/logs/error.log</code></p><p>kong配置文件默认地址为 /ect/kong/kong.conf<br>想要删除postgreSql，需要先断开所有连接<code>sudo ps aux | grep scidb | xargs sudo kill -9</code></p><p>启动命令<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code></p><h1 id="6-遇到问题"><a href="#6-遇到问题" class="headerlink" title="6.遇到问题"></a>6.遇到问题</h1><p>沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、</p><p>再启动kong时，报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">2018/12/06 15:26:01 [error] 7684#0: init_worker_by_lua error: /usr/local/share/lua/5.1/kong/init.lua:244: module &apos;resty.worker.events&apos; not found:Failed loading module resty.worker.events in LuaRocks rock lua-resty-worker-events 0.3.3-1</div><div class="line">no field package.preload[&apos;resty.worker.events&apos;]</div><div class="line">no file &apos;./resty/worker/events.lua&apos;</div><div class="line">no file &apos;./resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events.ljbc&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events/init.ljbc&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events.ljbc&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events/init.ljbc&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/share/lua/5.1/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/root/.luarocks/share/lua/5.1/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events.so&apos;</div><div class="line">no file &apos;./resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/lib/lua/5.1/resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/lib/lua/5.1/resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/lib/lua/5.1/loadall.so&apos;</div><div class="line">no file &apos;/root/.luarocks/lib/lua/5.1/resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty.so&apos;</div><div class="line">no file &apos;./resty.so&apos;</div><div class="line">no file &apos;/usr/local/lib/lua/5.1/resty.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/lib/lua/5.1/resty.so&apos;</div><div class="line">no file &apos;/usr/local/lib/lua/5.1/loadall.so&apos;</div><div class="line">no file &apos;/root/.luarocks/lib/lua/5.1/resty.so&apos;</div></pre></td></tr></table></figure><p>最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.</p><p>线索：<br><code>https://github.com/Kong/kong/issues/2838</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当前系统，环境centos7&lt;br&gt;起kong服务需要做：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;ul&gt;
&lt;li&gt;kong&lt;/li&gt;
&lt;li&gt;pgsql&lt;/li&gt;
&lt;li&gt;dashboard(可选，用来通过api来管理空)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置&lt;ul&gt;
      
    
    </summary>
    
      <category term="kong" scheme="http://yoursite.com/categories/kong/"/>
    
    
      <category term="kong" scheme="http://yoursite.com/tags/kong/"/>
    
  </entry>
  
</feed>
